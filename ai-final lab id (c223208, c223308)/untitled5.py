# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MgCCjh7qAW7hn6YTgAMiXNrvVGk5DXIf
"""

#!/usr/bin/env python3
"""
Console Tic‑Tac‑Toe
 ‑ Two human players
 ‑ X always starts
 ‑ Works on Windows, macOS, Linux
"""

import os
import sys

# ──────────────────────────
# 1. Global data & constants
# ──────────────────────────
EMPTY, PLAYER1, PLAYER2 = 0, 1, 2
SYMBOL = {EMPTY: " ", PLAYER1: "X", PLAYER2: "O"}   # for pretty printing

board = [[EMPTY for _ in range(3)] for _ in range(3)]


# ──────────────────────────
# 2. Utility helpers
# ──────────────────────────
def clear_screen() -> None:
    """Cross‑platform screen clear."""
    rc = os.system("cls" if os.name == "nt" else "clear")
    if rc:            # if the command isn't available (rare), fall back
        print("\n" * 80)


def init_board() -> None:
    """Set every cell to EMPTY (0)."""
    for r in range(3):
        for c in range(3):
            board[r][c] = EMPTY


def is_set(i: int, j: int) -> bool:
    return board[i][j] != EMPTY


def set_player_input(i: int, j: int, player: int) -> None:
    board[i][j] = player


# ──────────────────────────
# 3. Game‑rule checks
# ──────────────────────────
def is_game_over(player: int) -> bool:
    """Return True if the given player has a 3‑in‑a‑row."""
    # rows and columns
    for idx in range(3):
        if all(board[idx][c] == player for c in range(3)):          # row
            return True
        if all(board[r][idx] == player for r in range(3)):          # column
            return True
    # diagonals
    if all(board[d][d] == player for d in range(3)):
        return True
    if all(board[d][2 - d] == player for d in range(3)):
        return True
    return False


def is_tie() -> bool:
    """Return True if every square is filled and nobody has won."""
    return all(board[r][c] != EMPTY for r in range(3) for c in range(3))


# ──────────────────────────
# 4. Display
# ──────────────────────────
def display_board() -> None:
    clear_screen()
    print("-------------")
    print("| Tic‑Tac‑Toe |")
    print("-------------\n")

    for r in range(3):
        print("|---|---|---|")
        row = "".join(f"| {SYMBOL[board[r][c]]} " for c in range(3))
        print(row + "|")
    print("|---|---|---|\n")


def win_message(player: int) -> None:
    print("\n**   WIN   **")
    print(f"** Player {SYMBOL[player]} **\n")


def tie_message() -> None:
    print("\n**   Tie Game   **\n")


# ──────────────────────────
# 5. Main loop
# ──────────────────────────
def main() -> None:
    print("Start a new game? (1 = yes, 0 = exit): ", end="")

    while True:
        try:
            start = int(input().strip())
        except ValueError:
            print("Please enter 0 or 1: ", end="")
            continue

        if start == 0:
            break

        init_board()
        current_player = PLAYER1  # X always starts

        while True:
            display_board()
            print(f"Player {SYMBOL[current_player]} → choose row & col (0‑2 0‑2): ", end="")

            # read two integers
            try:
                i_str, j_str = input().split()
                i, j = int(i_str), int(j_str)
            except ValueError:
                print("⚠  Enter TWO numbers between 0 and 2 (e.g. 1 2).")
                continue

            if not (0 <= i <= 2 and 0 <= j <= 2):
                print("⚠  Row and column must each be 0, 1, or 2.")
                continue
            if is_set(i, j):
                print(f"⚠  Square ({i}, {j}) is already taken!")
                continue

            # make the move
            set_player_input(i, j, current_player)

            # check win / tie
            if is_game_over(current_player):
                display_board()
                win_message(current_player)
                break
            if is_tie():
                display_board()
                tie_message()
                break

            # switch turns
            current_player = PLAYER2 if current_player == PLAYER1 else PLAYER1

        print("Start a new game? (1 = yes, 0 = exit): ", end="")

    print("Good‑bye!")


if _name_ == "_main_":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit("\nInterrupted. Bye!")